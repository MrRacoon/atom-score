'use babel';

import { compose, map, mergeAll, keys, flatten, indexBy, prop } from 'ramda';
import Chance from 'chance';
const chance = new Chance();

const stim = ({ id, combo = '_', points = 0 }) => ({
  id,
  combo,
  points,
  module: id.split(':')[0] || id,
  command: id.split(':')[1] || id,
});

export const stimuli = [
  stim({ id: 'core:redo',
    combo: '^r',
    points: -2,
  }),
  stim({ id: 'editor:fold-current-row',
    combo: 'zc',
    points: 1,
  }),
  stim({ id: 'editor:move-to-beginning-of-line',
    combo: 'H',
    points: 3,
  }),
  stim({ id: 'editor:move-to-end-of-line',
    combo: 'L',
    points: 3,
  }),
  stim({ id: 'editor:unfold-current-row',
    combo: 'zo',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:activate-insert-mode',
    combo: 'i',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:change',
    combo: 'd',
    points: 3,
  }),
  stim({ id: 'vim-mode-plus:change-to-last-character-of-line',
    combo: 'd',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:delete',
    combo: 'd',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:find',
    combo: 'f',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:find-backwards',
    combo: 'F',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:indent',
    combo: '>',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:insert-above-with-newline',
    combo: 'O',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:insert-after',
    combo: 'a',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:insert-after-end-of-line',
    combo: 'A',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:insert-at-first-character-of-line',
    combo: 'I',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:insert-below-with-newline',
    combo: 'o',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:move-down',
    combo: 'j',
    points: -1,
  }),
  stim({ id: 'vim-mode-plus:move-left',
    combo: 'h',
    points: -1,
  }),
  stim({ id: 'vim-mode-plus:move-right',
    combo: 'l',
    points: -1,
  }),
  stim({ id: 'vim-mode-plus:move-to-end-of-whole-word',
    combo: 'E',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:move-to-end-of-word',
    combo: 'e',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:move-to-line',
    combo: 'g',
    points: 3,
  }),
  stim({ id: 'vim-mode-plus:move-to-next-whole-word',
    combo: 'W',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:move-to-next-word',
    combo: 'w',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:move-to-previous-whole-word',
    combo: 'B',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:move-to-previous-word',
    combo: 'b',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:move-to-start-of-file',
    combo: 'gg',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:move-up',
    combo: 'k',
    points: -1,
  }),
  stim({ id: 'vim-mode-plus:outdent',
    combo: '<',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:put-after',
    combo: 'p',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:put-before',
    combo: 'p',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:repeat',
    combo: '.',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:repeat-search',
    combo: 'n',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:repeat-search-backwards',
    combo: 'N',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:reset-normal-mode',
    combo: '^e',
    points: 1,
  }),
  stim({ id: 'vim-mode-plus:scroll-cursor-to-bottom',
    combo: 'z-',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:scroll-cursor-to-bottom-leave',
    combo: 'zb',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:scroll-cursor-to-left',
    combo: 'zs',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:scroll-cursor-to-middle',
    combo: 'z.',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:scroll-cursor-to-middle-leave',
    combo: 'zz',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:scroll-cursor-to-right',
    combo: 'ze',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:scroll-cursor-to-top-leave',
    combo: 'zt',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:scroll-half-screen-down',
    combo: '^d',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:scroll-half-screen-up',
    combo: '^u',
    points: 2,
  }),
  stim({ id: 'vim-mode-plus:search',
    combo: '/',
    points: 3,
  }),
  stim({ id: 'vim-mode-plus:till',
    combo: 't',
    points: 3,
  }),
  stim({ id: 'vim-mode-plus:till-backwards',
    combo: 'T',
    points: 3,
  }),
  stim({ id: 'vim-mode-plus:undo',
    combo: 'u',
    points: -2,
  }),
  stim({ id: 'vim-mode-plus:yank',
    combo: 'y',
    points: 1,
  }),
];

export const asMap           = indexBy(prop('id'), stimuli);
export const stimulusStub    = () => chance.pickone(stimuli);
export const defaultStimulus = id => stim({ id });
export const lookupStimulus  = id => {
  if (id) {
    let st = atom.config
      .get(`atom-score.stimulusSettings.${id}`);
    if (st) {
      st.id = id;
      return stim(st);
    } else if (atom.config.get('atom-score.devMode')) {
      return defaultStimulus(id);
    }
  }
};

const stimConf = stim => ({
  [stim.id]: {
    type: 'object',
    title: stim.command,
    description: stim.id,
    properties: {
      points: {
        type: 'integer',
        title: 'points',
        default: stim.points,
        minimum: -10,
        maximum: 10
      },
      combo: {
        type: 'string',
        title: 'character display',
        default: stim.combo
      }
    }
  },
});
const lookupOrDefault = (id) => {
  if (!id) { return []; }
  const stim = asMap[id] || defaultStimulus(id);
  return [stimConf(stim)];
};

const stimConfFull = ({
  stimulusSettings: {
    type: 'object',
    properties: compose(mergeAll, flatten, map(lookupOrDefault), keys)(asMap)
  }
});

export const stimConfig = stimConfFull;
